#pragma once
#include "core/app.h"
#include "Vector4D.h"
#include "Matrix4D.h"
#include <string>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <iostream>

//Contains segment data
struct Segment {
public:

	//Position at start of segment
	Vector4D position0;

	//Position at end of segment
	Vector4D position1;

	//transform at middle of segment
	Matrix4D transform;

	//length of segment
	float length;

	//thickness of segment
	float thickness;

	//
	bool hasLeaf = false;

	//Index to predecessor
	int predecessor = -1;

	//Index to branches 
	std::vector<int> branches;

	//Index to successor within the same branch
	int successor;

	int nrOfSuccessors = 0;

	//How many times the tree has branched up till this segment
	int branchingLevel;

	//How many segments there are prior to this one on the current branch
	int branchDepth;

	Segment(Matrix4D transform_) { transform = transform_; }

	Segment(void)
	{
		length = 0;
		thickness = 0;

	}
	void setDimensions(float len, float width) {
		length = len;
		thickness = width;
	}
	void setPositions(Vector4D pos0, Vector4D pos1) {
		position0 = pos0;
		position1 = pos1;
	}
};
//Interprets the Sentence generated by the L-system
class LsystemInterpreter {

	//Expose these 
	float dist = 2.f;
	float segmentLengthReduction = 10;
	float taper;
	float angleRad = 0.365f;

	//Contains letters generated by the L-system
	std::string sentence;
	//Transform that moves around based on instructions coupled with the letters in the sentence
	Matrix4D turtle;


	float thicknessFactor = 0;
	int previous = -1;
	int current = 0;
	int branchLevelTracker;
	int branchDepthTracker;
	bool skipBranch = false;


	//Generates random nr
	float randomNr(float input, int range);
public: 

	//List of generated segments
	std::vector<Segment> segmentList;


	

	//Initiate with sentence
	LsystemInterpreter(std::string sentence_);
	//Initiate without sentence
	LsystemInterpreter();

	void setSentence(std::string sentence_);
	//Move the turtle forward
	void moveForwardByDistance(float distance);
	//Rotate around X-axis
	void rotateXbyAngle(float radians);
	//Rotate around Y-axis
	void rotateYbyAngle(float radians);
	//Rotate around Z-axis
	void rotateZbyAngle(float radians);
	//Do the interpretation, quite extensive function
	void calculatePoints(int angleRandRange = 0, int branchRandRange = 0);
	//Does everything that needs to be done when a segment is added
	void addSegment(Segment s);

};


